import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kohsuke:github-api:1.94'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '8.3.8'
    id 'com.gradle.plugin-publish' version '1.3.1'
    id 'com.github.ethankhall.semantic-versioning' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'com.github.jk1.dependency-license-report' version '2.9'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id 'org.ajoberstar.git-publish' version '4.2.2'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

project.version.with {
    major = badassRuntimePluginVersionMajor as int
    minor= badassRuntimePluginVersionMinor as int
    patch = badassRuntimePluginVersionPatch as int
    if (project.hasProperty('badassRuntimePluginVersionLabel')) {
        preRelease = badassRuntimePluginVersionLabel
    }
    releaseBuild = Boolean.valueOf(badassRuntimePluginReleaseBuild)
}
ext.badassRuntimePluginVersion = project.version as String
ext.badassRuntimePluginTag = Boolean.valueOf(badassRuntimePluginReleaseBuild) ? "v$ext.badassRuntimePluginVersion" : 'master'

group = 'org.beryx'
version = badassRuntimePluginVersion

ext.asmVersion = '9.8'

repositories {
    mavenCentral()
}

sourceCompatibility = 17

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

task licenseCheckGroovy(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src").include("**/*.groovy")
}
tasks.license.dependsOn licenseCheckGroovy

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
    excludes (['**/*.properties', '**/*.txt', '**/hello*/'])
}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(shadowJar)
    }
}

configurations {
    asciidoctorExt
}

dependencies {
    shadow gradleTestKit()
    shadow localGroovy()

    shadow group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    implementation "org.ow2.asm:asm:$asmVersion"
    implementation "org.ow2.asm:asm-commons:$asmVersion"
    implementation "org.ow2.asm:asm-tree:$asmVersion"
    implementation "org.ow2.asm:asm-util:$asmVersion"
    implementation "org.ow2.asm:asm-analysis:$asmVersion"

    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude module: 'groovy-all'
    }
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'org.objenesis:objenesis:3.2'
    testImplementation ('com.athaydes:spock-reports:2.3.1-groovy-3.0') { transitive = false}

    asciidoctorExt 'com.bmuschko:asciidoctorj-tabbed-code-extension:0.3'
}

gradlePlugin {
    website = 'https://github.com/beryx/badass-runtime-plugin/'
    vcsUrl = 'https://github.com/beryx/badass-runtime-plugin'

    plugins {
        jlink {
            id = 'org.beryx.runtime'
            implementationClass = 'org.beryx.runtime.RuntimePlugin'
            displayName = 'Badass Runtime Plugin'
            description = 'A Gradle plugin that assembles your modules into a custom runtime image'
            tags.set(['runtime', 'jlink', 'jpms', 'image'])
        }
    }
}

shadowJar {
    archiveClassifier = ''
    relocate 'org.objectweb.asm', 'org.beryx.jlink.shadow.asm'
}

jar {
    enabled = false
    dependsOn shadowJar

    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': badassRuntimePluginVersion
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

asciidoctor {
    configurations 'asciidoctorExt'
    setSourceDir file("doc")
    baseDirFollowsSourceDir()
    sources {include 'index.adoc'}
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            'project-version': version,
            icons: 'font',
            imagesdir: 'img',
            'data-uri': '',
            linkattrs: true,
            linkcss: true,
            'git-tag': badassRuntimePluginTag,
            'blob-root': "https://github.com/beryx/badass-runtime-plugin/blob/$badassRuntimePluginTag"
}

gitPublish {
    repoUri = 'https://github.com/beryx/badass-runtime-plugin.git'
    branch = 'gh-pages'

    def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
    if(pgType == 'init') {
        contents .from file("ghpages")
    } else if(pgType == 'list') {
        contents.from file("build/release-list")
    } else {
        contents.from file(asciidoctor.outputDir.path)
        contents.from file("build/docs")
    }

    def docDir = Boolean.valueOf(badassRuntimePluginReleaseBuild) ? 'releases' : 'snapshots'
    if(pgType == 'init') {
        contents.into "."
    } else if(pgType == 'list') {
        contents.into "."
        preserve {
            include '**'
            exclude "releases.md"
        }
    } else if(pgType == 'version') {
        gitPublishPush.enabled = (docDir != 'snapshots')
        contents.into "$docDir/$badassRuntimePluginVersion"
        preserve {
            include '**'
            exclude "$docDir/$badassRuntimePluginVersion"
        }
    } else {
        contents.into "$docDir/latest"
        preserve {
            include '**'
            exclude "$docDir/latest"
        }
    }
}

task "update-release-list" {
    doLast {
        def docBaseUrl = 'http://badass-runtime-plugin.beryx.org'
        updateReleaseList(docBaseUrl)
    }
}

def updateReleaseList(String docBaseUrl) {
    List<String> releases = getReleases()
    def markdown = getReleasesMarkdown(releases, docBaseUrl)
    def releaseListDir = new File('build/release-list')
    releaseListDir.mkdirs()
    new File(releaseListDir, 'releases.md').write(markdown)
}

def getReleases() {
    GitHub gitHubApi = GitHub.connectUsingPassword(System.getenv('GRGIT_USER') ?: '', '')
    def releases = gitHubApi.getOrganization("beryx")
            .getRepository("badass-runtime-plugin")
            .getDirectoryContent("releases", "gh-pages")*.name
    releases.removeAll { !it || it == 'latest' }

    releases.sort { o1, o2 ->
        if(!o1) return o2 ? 1 : 0
        if(!o2) return -1
        String[] tokens1 = o1.split("\\.")
        String[] tokens2 = o2.split("\\.")
        int len = Math.min(tokens1.length, tokens2.length)
        for(int i=0; i<len; i++) {
            int result
            try {
                int n1 = Integer.parseInt(tokens1[i])
                int n2 = Integer.parseInt(tokens2[i])
                result = Integer.compare(n2, n1)
            } catch (NumberFormatException e) {
                result = tokens2[i] <=> tokens1[i]
            }
            if(result != 0) return result
        }
        tokens2.length <=> tokens1.length
    }
    releases
}

def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    def releasesTemplate = '''
            ## List of all releases ##

            **Latest snapshot**
            - [documentation]($docBaseUrl/snapshots/latest)
            - [groovydoc]($docBaseUrl/snapshots/latest/groovydoc)

            <% releases.each { %>**Release $it**
              - [documentation]($docBaseUrl/releases/$it)
              - [groovydoc]($docBaseUrl/releases/$it/groovydoc)

            <% } %>
        '''.stripIndent()

    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(releasesTemplate)
    def binding = [
            docBaseUrl: docBaseUrl,
            releases  : releases
    ]

    template.make(binding).toString()
}
